{"ast":null,"code":"import React, { useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\n\nvar placeHolderStyles = function placeHolderStyles(prop) {\n  return css([\"content:'\", \"';color:rgb(119,119,119);\"], prop);\n};\n\nvar StyledDiv = /*#__PURE__*/styled.div.withConfig({\n  displayName: \"StyledDiv\",\n  componentId: \"react-input-multiline__sc-1ty5k1-0\"\n})([\"display:\", \";background:transparent;outline:none;border:none;max-width:100%;min-width:1px;word-wrap:break-word;&:after{\", \"}\"], function (props) {\n  return props.title.length > 0 ? 'inline' : 'inline-block';\n}, function (props) {\n  return props.contentEditable && !props.title && placeHolderStyles(props.placeholder);\n});\n\nvar MultilineInput = function MultilineInput(props) {\n  var id = props.id,\n      placeholder = props.placeholder,\n      onChange = props.onChange,\n      value = props.value,\n      additionalClasses = props.additionalClasses,\n      style = props.style,\n      _props$disabled = props.disabled,\n      disabled = _props$disabled === void 0 ? false : _props$disabled,\n      preventLineBreaks = props.preventLineBreaks;\n\n  var defaultValue = useRef(value),\n      _useState = useState(value),\n      titleValue = _useState[0],\n      setTitleValue = _useState[1],\n      divRef = useRef(null);\n\n  var setTargetPropsAndCallOnChange = function setTargetPropsAndCallOnChange(e) {\n    var textValue = e.target.innerText.replace(/[\\u200B]/g, '');\n    setTitleValue(textValue);\n    e.target.value = textValue;\n    e.target.name = e.target.id;\n    onChange(e);\n  };\n\n  var preventLineBreaksOnType = function preventLineBreaksOnType(e) {\n    return e.key.toLowerCase() === 'enter' && e.preventDefault();\n  };\n\n  var preventLineBreaksOnPaste = function preventLineBreaksOnPaste(e) {\n    e.preventDefault();\n    var clipboardText = e.clipboardData.getData('text');\n    clipboardText = clipboardText.replace(/\\n/g, ' ');\n    var selection = window.getSelection();\n    if (!selection.rangeCount) return false;\n    selection.deleteFromDocument();\n    selection.getRangeAt(0).insertNode(document.createTextNode(clipboardText));\n    selection.collapseToEnd();\n    setTargetPropsAndCallOnChange(e);\n  };\n\n  return React.createElement(StyledDiv, {\n    title: titleValue,\n    ref: divRef,\n    id: id,\n    className: additionalClasses == null ? void 0 : additionalClasses.join(' '),\n    style: style,\n    placeholder: placeholder,\n    contentEditable: !disabled,\n    onInput: setTargetPropsAndCallOnChange,\n    onBlur: setTargetPropsAndCallOnChange,\n    onKeyDown: preventLineBreaks && preventLineBreaksOnType,\n    onPaste: preventLineBreaks && preventLineBreaksOnPaste,\n    spellCheck: false,\n    dangerouslySetInnerHTML: {\n      __html: defaultValue.current\n    }\n  });\n};\n\nexport { MultilineInput };","map":{"version":3,"mappings":"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","names":["placeHolderStyles","prop","css","StyledDiv","styled","div","withConfig","displayName","componentId","props","title","length","contentEditable","placeholder","MultilineInput","id","onChange","value","additionalClasses","style","disabled","preventLineBreaks","useRef","useState","titleValue","setTitleValue","divRef","setTargetPropsAndCallOnChange","e","textValue","target","innerText","replace","name","preventLineBreaksOnType","key","toLowerCase","preventDefault","preventLineBreaksOnPaste","clipboardText","clipboardData","getData","selection","window","getSelection","rangeCount","deleteFromDocument","getRangeAt","insertNode","document","createTextNode","collapseToEnd","React","ref","className","join","onInput","onBlur","onKeyDown","onPaste","spellCheck","dangerouslySetInnerHTML","__html","defaultValue","current"],"sources":["../src/MultilineInput.tsx"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport {} from 'styled-components/cssprop';\n\ntype Props = {\n  id: string;\n  onChange: Function;\n  value: string;\n  additionalClasses?: string[];\n  style?: React.CSSProperties;\n  placeholder?: string;\n  disabled?: Boolean;\n  preventLineBreaks?: Boolean;\n};\n\ninterface styledDivProps {\n  readonly title: { length: number };\n  readonly contentEditable: boolean;\n  readonly placeholder: string | undefined;\n}\n\nconst placeHolderStyles = (prop: any) => css`\n  content: '${prop}';\n  color: rgb(119, 119, 119);\n`;\n\nconst StyledDiv = styled.div<styledDivProps>`\n  display: ${(props) => (props.title.length > 0 ? 'inline' : 'inline-block')};\n  background: transparent;\n  outline: none;\n  border: none;\n  max-width: 100%;\n  min-width: 1px;\n  word-wrap: break-word;\n\n  &:after {\n    ${(props) =>\n      props.contentEditable &&\n      !props.title &&\n      placeHolderStyles(props.placeholder)}\n  }\n`;\n\nexport const MultilineInput: React.FunctionComponent<Props> = (props) => {\n  const {\n    id,\n    placeholder,\n    onChange,\n    value,\n    additionalClasses,\n    style,\n    disabled = false,\n    preventLineBreaks,\n  } = props;\n\n  const defaultValue = useRef(value),\n    [titleValue, setTitleValue] = useState(value),\n    divRef = useRef<HTMLDivElement | null>(null);\n\n  const setTargetPropsAndCallOnChange = (e: any): void => {\n    const textValue = e.target.innerText.replace(/[\\u200B]/g, '');\n    setTitleValue(textValue);\n    e.target.value = textValue;\n    e.target.name = e.target.id;\n    onChange(e);\n  };\n\n  const preventLineBreaksOnType = (\n    e: React.KeyboardEvent<HTMLInputElement>\n  ): void | boolean => e.key.toLowerCase() === 'enter' && e.preventDefault();\n\n  const preventLineBreaksOnPaste = (\n    e: React.ClipboardEvent<HTMLInputElement>\n  ): void | boolean => {\n    e.preventDefault();\n\n    let clipboardText = e.clipboardData.getData('text');\n    clipboardText = clipboardText.replace(/\\n/g, ' ');\n\n    const selection: any = window.getSelection();\n    if (!selection.rangeCount) return false;\n    selection.deleteFromDocument();\n    selection.getRangeAt(0).insertNode(document.createTextNode(clipboardText));\n    selection.collapseToEnd();\n\n    setTargetPropsAndCallOnChange(e);\n  };\n\n  return (\n    <StyledDiv\n      title={titleValue}\n      ref={divRef}\n      id={id}\n      className={additionalClasses?.join(' ')}\n      style={style}\n      placeholder={placeholder}\n      contentEditable={!disabled}\n      onInput={setTargetPropsAndCallOnChange}\n      onBlur={setTargetPropsAndCallOnChange}\n      onKeyDown={preventLineBreaks && preventLineBreaksOnType}\n      onPaste={preventLineBreaks && preventLineBreaksOnPaste}\n      spellCheck={false}\n      dangerouslySetInnerHTML={{ __html: defaultValue.current }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}